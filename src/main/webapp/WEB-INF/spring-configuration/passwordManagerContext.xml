<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

    <description>
        This file defines beans for the Password Manager extension.
    </description>
    
    <bean id="lookupSecurityQuestionAction" class="net.unicon.cas.passwordmanager.flow.LookupSecurityQuestionAction"
        p:customSecurityQuestionRequired="${ldap.pm.security.requireCustomQuestion}"
        p:passwordManagerService-ref="ldapPasswordManagerService" />

    <bean id="checkSecurityQuestionResponseAction" class="net.unicon.cas.passwordmanager.flow.CheckSecurityQuestionResponseAction"
        p:lockoutService-ref="lockoutService" p:passwordManagerService-ref="ldapPasswordManagerService"/>
    
    <bean id="processChangePasswordAction" class="net.unicon.cas.passwordmanager.flow.ProcessChangePasswordAction"
        p:passwordManagerService-ref="ldapPasswordManagerService" />
    
    <bean id="processSecurityQuestionSetupAction" class="net.unicon.cas.passwordmanager.flow.ProcessSecurityQuestionSetupAction"
        p:passwordManagerService-ref="ldapPasswordManagerService" />
    
    <!--<util:constant id="reCaptchaServer" static-field="net.tanesha.recaptcha.ReCaptchaImpl.HTTPS_SERVER" />-->
    
<!--    <bean id="reCaptcha" class="net.tanesha.recaptcha.ReCaptchaImpl">
        <property name="privateKey" value="${ldap.pm.recaptcha.privateKey}" />
        <property name="publicKey" value="${ldap.pm.recaptcha.publicKey}" />
        <property name="includeNoscript" value="${ldap.pm.recaptcha.includeNoscript:true}" />
        <property name="recaptchaServer" ref="reCaptchaServer" />
    </bean>-->
        
    <bean id="recaptchaValidationAction" class="net.unicon.cas.passwordmanager.flow.RecaptchaValidationAction" >
			<property name="secret" value="${ldap.pm.recaptcha.privateKey}" />
			<property name="siteKey" value="${ldap.pm.recaptcha.publicKey}" />
		</bean>
        
    <!-- The following regex matches 8 or more characters, and must include
         at least one lowercase, one uppercase, and one digit. -->
    <bean id="changePasswordBeanValidator" class="net.unicon.cas.passwordmanager.flow.validator.ChangePasswordBeanValidator"
        p:passwordRegex="${ldap.pm.passwordRegex:'^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$'}"/>
    <bean id="setPasswordBeanValidator" class="net.unicon.cas.passwordmanager.flow.validator.SetPasswordBeanValidator"
        p:passwordRegex="${ldap.pm.passwordRegex:'^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$'}"/>
    
    <!-- If there are too many invalid password reset attempts (allowedIncorrectAttempts),
         the user is prevented from changing his/her password for
         secondsUntilNextAllowedAttempt seconds. Default is 999999 (essentially disabled). -->
    <bean id="lockoutService" class="net.unicon.cas.passwordmanager.service.MemoryPasswordManagerLockoutService"
        p:allowedIncorrectAttempts="${ldap.pm.lockout.allowedAttempts:999999}"
        p:secondsUntilNextAllowedAttempt="${ldap.pm.lockout.delay:0}"/>
    
    <bean id="ldapPasswordManagerService" class="net.unicon.cas.passwordmanager.service.LdapPasswordManagerService">
        <property name="ldapServers">
            <util:list>
                <ref bean="ldapServer"/>
                
            <!-- You can chain more LDAP servers here... just add additional
                 beans below.
                     
                <ref bean="ldapServer2"/>
                <ref bean="ldapServer3"/>
            -->
            
            </util:list>
        </property>
        <property name="lockoutService" ref="lockoutService" />
    </bean>
    
    <bean id="pmPoolConfig" class="org.ldaptive.pool.PoolConfig">
      <property name="minPoolSize" value="${ldap.pm.pool.minSize:3}" />
      <property name="maxPoolSize" value="${ldap.pm.pool.maxSize:10}" />
      <property name="validateOnCheckIn" value="${ldap.pm.pool.validateOnCheckIn:false}" />
      <property name="validateOnCheckOut" value="${ldap.pm.pool.validateOnCheckOut:false}" />
      <property name="validatePeriod" value="${ldap.pm.pool.validatePeriod:1800}" /><!-- in seconds -->
      <property name="validatePeriodically" value="${ldap.pm.pool.validatePeriodically:false}" />
    </bean>
    <bean id="pmConnectionInitializer" class="org.ldaptive.BindConnectionInitializer">
      <property name="bindDn" value="${ldap.pm.authentication.manager.userdn}" />
      <property name="bindCredential">
        <bean class="org.ldaptive.Credential">
          <constructor-arg index="0" type="java.lang.String" value="${ldap.pm.authentication.manager.password}"/>
        </bean>
      </property>
    </bean>
    <bean id="pmConnectionConfig" class="org.ldaptive.ConnectionConfig">
      <property name="ldapUrl" value="${ldap.pm.ldapUrl}" />
      <property name="connectionInitializer" ref="pmConnectionInitializer" />
    </bean>
    <bean id="pmDefaultConnectionFactory" class="org.ldaptive.DefaultConnectionFactory">
      <property name="connectionConfig" ref="pmConnectionConfig" />
    </bean>
    <bean id="pmConnectionPool" class="${ldap.pm.pool.class}" init-method="initialize">
      <property name="poolConfig" ref="pmPoolConfig" />
      <property name="connectionFactory" ref="pmDefaultConnectionFactory" />
    </bean>
    <bean id="pmConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory">
      <property name="connectionPool" ref="pmConnectionPool"/>
    </bean>
    
    <bean id="pmDnSearchCache" class="org.ldaptive.cache.LRUCache">
      <constructor-arg index="0" type="int" value="${ldap.pm.dnCache.size:100}" /> <!-- size -->
      <constructor-arg index="1" type="long" value="${ldap.pm.dnCache.ttl:600}" /> <!-- timeToLive -->
      <constructor-arg index="2" type="long" value="${ldap.pm.dnCache.interval:300}" /> <!-- interval -->
    </bean>
    
    <bean id="pmDnResolver" class="org.ldaptive.auth.PooledSearchDnResolver">
      <property name="connectionFactory" ref="pmConnectionFactory" />
      <property name="baseDn" value="${ldap.pm.baseDn}" />
      <property name="userFilter" value="${ldap.pm.userFilter}"/>
      <!-- Uncomment the following if you need to use parameters.
            They should be comma separated strings. -->
      
      <property name="userFilterParameters" value="${ldap.pm.userFilterParams:}"/><!-- comma separated params -->
      
      <property name="subtreeSearch" value="${ldap.pm.subtreeSearch:false}" />
      <property name="followReferrals" value="${ldap.pm.followReferrals:false}" />
      <property name="searchCache" ref="pmDnSearchCache" />
    </bean>
    
    <bean id="parentLdapServer" abstract="true" class="net.unicon.cas.passwordmanager.ldap.AbstractLdapServer">
        <property name="defaultQuestions">
            <util:map>
              <entry key="${ldap.pm.question.default.1.answerAttr}" value="${ldap.pm.question.default.1.question}"/>
              <entry key="${ldap.pm.question.default.2.answerAttr}" value="${ldap.pm.question.default.2.question}"/>
            </util:map>
        </property>
        <property name="customQuestions">
            <util:map>
              <entry key="${ldap.pm.question.custom.1.answerAttr}" value="${ldap.pm.question.custom.1.questionAttr}"/>
              <!--<entry key="${ldap.pm.question.custom.2.answerAttr}" value="${ldap.pm.question.custom.2.questionAttr}"/>-->
            </util:map>
        </property>
    </bean>
    
    <!-- Server class is either net.unicon.cas.passwordmanager.ldap.ActiveDirectoryLdapServer
         or net.unicon.cas.passwordmanager.ldap.OpenLdapLdapServer. -->
    <bean id="ldapServer" parent="parentLdapServer" class="${ldap.pm.server.class}"
          c:authenticator-ref="authenticator">
        <property name="connectionFactory" ref="pmConnectionFactory" />
        
        <property name="passwordAttr" value="${ldap.pm.passwordAttr}"/>
        
        <property name="dnResolver" ref="pmDnResolver" />
        
        <property name="description" value="${ldap.pm.server.description:}"/>
        
        <property name="principalNameTransformer">
          <bean class="${ldap.pm.server.principalNameTransformer.class:org.jasig.cas.authentication.handler.NoOpPrincipalNameTransformer}" />
        </property>
        
    <!-- OpenLDAP-specific property.  Uncomment if you want to encrypt your
         password field *and* you're not using Active Directory.
             
        <property name="encryptionAlgorithm" value="${pm.ldap.server.openldap.encryption-algorithm}"/>
    -->
    </bean>
</beans>

